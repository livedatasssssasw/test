var e={};Object.defineProperty(e,"__esModule",{value:!0});var r=e.RLP=e.utils=e.decode=e.encode=void 0;function t(e){if(Array.isArray(e)){const r=[];let n=0;for(let i=0;i<e.length;i++){const o=t(e[i]);r.push(o),n+=o.length}return c(o(n,192),...r)}const r=w(e);return 1===r.length&&r[0]<128?r:c(o(r.length,128),r)}function n(e,r,t){if(t>e.length)throw new Error("invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds");return e.slice(r,t)}function i(e){if(0===e[0])throw new Error("invalid RLP: extra zeros");return s(u(e))}function o(e,r){if(e<56)return Uint8Array.from([e+r]);const t=g(e),n=g(r+55+t.length/2);return Uint8Array.from(d(n+t))}function a(e,r=!1){if(null==e||0===e.length)return Uint8Array.from([]);const t=l(w(e));if(r)return t;if(0!==t.remainder.length)throw new Error("invalid RLP: remainder must be zero");return t.data}function l(e){let r,t,o,a,f;const u=[],s=e[0];if(s<=127)return{data:e.slice(0,1),remainder:e.slice(1)};if(s<=183){if(r=s-127,o=128===s?Uint8Array.from([]):n(e,1,r),2===r&&o[0]<128)throw new Error("invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed");return{data:o,remainder:e.slice(r)}}if(s<=191){if(t=s-182,e.length-1<t)throw new Error("invalid RLP: not enough bytes for string length");if(r=i(n(e,1,t)),r<=55)throw new Error("invalid RLP: expected string length to be greater than 55");return o=n(e,t,r+t),{data:o,remainder:e.slice(r+t)}}if(s<=247){for(r=s-191,a=n(e,1,r);a.length;)f=l(a),u.push(f.data),a=f.remainder;return{data:u,remainder:e.slice(r)}}{if(t=s-246,r=i(n(e,1,t)),r<56)throw new Error("invalid RLP: encoded list too short");const o=t+r;if(o>e.length)throw new Error("invalid RLP: total length is larger than the data");for(a=n(e,t,o);a.length;)f=l(a),u.push(f.data),a=f.remainder;return{data:u,remainder:e.slice(o)}}}e.encode=t,e.decode=a;const f=Array.from({length:256},((e,r)=>r.toString(16).padStart(2,"0")));function u(e){let r="";for(let t=0;t<e.length;t++)r+=f[e[t]];return r}function s(e){const r=Number.parseInt(e,16);if(Number.isNaN(r))throw new Error("Invalid byte sequence");return r}function d(e){if("string"!=typeof e)throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex");const r=new Uint8Array(e.length/2);for(let t=0;t<r.length;t++){const n=2*t;r[t]=s(e.slice(n,n+2))}return r}function c(...e){if(1===e.length)return e[0];const r=e.reduce(((e,r)=>e+r.length),0),t=new Uint8Array(r);for(let n=0,i=0;n<e.length;n++){const r=e[n];t.set(r,i),i+=r.length}return t}function h(e){return(new TextEncoder).encode(e)}function g(e){if(e<0)throw new Error("Invalid integer as argument, must be unsigned!");const r=e.toString(16);return r.length%2?`0${r}`:r}function y(e){return e.length>=2&&"0"===e[0]&&"x"===e[1]}function w(e){if(e instanceof Uint8Array)return e;if("string"==typeof e)return y(e)?d((r="string"!=typeof(t=e)?t:y(t)?t.slice(2):t).length%2?`0${r}`:r):h(e);var r,t;if("number"==typeof e||"bigint"==typeof e)return e?d(g(e)):Uint8Array.from([]);if(null==e)return Uint8Array.from([]);throw new Error("toBytes: received unsupported type "+typeof e)}e.utils={bytesToHex:u,concatBytes:c,hexToBytes:d,utf8ToBytes:h},r=e.RLP={encode:t,decode:a};export{r as R};
